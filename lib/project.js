// Generated by CoffeeScript 1.3.3
(function() {
  var Downloader, Project, debug, env, error, finished, fs, info, path, testModule, tuneFiles, warning, _, _ref;

  _ = require('underscore');

  path = require('path');

  fs = require('fs');

  Downloader = require('./downloader').Downloader;

  env = process.env;

  _ref = require('./command'), debug = _ref.debug, warning = _ref.warning, error = _ref.error, info = _ref.info, finished = _ref.finished;

  tuneFiles = ['Tunefile', 'tunefile', 'tunefile.cson', 'Tunefile.cson'];

  testModule = function(mod) {
    try {
      return require(mod);
    } catch (err) {
      return err.message.indexOf('Cannot find module') === -1;
    }
  };

  Project = (function() {

    function Project() {
      this.setup();
    }

    Project.prototype.setup = function() {
      var _ref1;
      this.root = path.resolve(__dirname, '..');
      this.file = this.findConfigFile();
      this.railo = this.findRailo();
      try {
        this.configs = (require('./tunefile')).configs(this.file);
        _.defaults(this.configs, {
          root: '.'
        });
      } catch (err) {
        if (this.configs != null) {
          error('in', this.file, err.message);
        } else {
          throw err;
        }
      }
      return _ref1 = this.configs, this.root = _ref1.root, _ref1;
    };

    Project.prototype.findConfigFile = function() {
      var file, _i, _len;
      for (_i = 0, _len = tuneFiles.length; _i < _len; _i++) {
        file = tuneFiles[_i];
        if (fs.existsSync("./" + file)) {
          return file;
        }
      }
      throw "No tunefile found";
    };

    Project.prototype.hasConfigFile = function() {
      var file, _i, _len;
      for (_i = 0, _len = tuneFiles.length; _i < _len; _i++) {
        file = tuneFiles[_i];
        if (fs.existsSync("./" + file)) {
          return true;
        }
      }
      return false;
    };

    Project.prototype.missingModules = function() {};

    Project.prototype.getWheels = function() {};

    Project.prototype.findRailo = function() {
      var foundPath, lookPath, pathsToLook, _i, _len;
      foundPath = '';
      pathsToLook = [path.resolve("/tmp/Railo/"), path.resolve("/opt/Railo/"), path.resolve("/usr/local/Railo/"), path.resolve("./Railo/")];
      for (_i = 0, _len = pathsToLook.length; _i < _len; _i++) {
        lookPath = pathsToLook[_i];
        if (fs.existsSync(lookPath)) {
          foundPath = lookPath;
        }
      }
      return foundPath;
    };

    Project.prototype.getRailo = function(cb) {
      var dl;
      this.railo = this.findRailo();
      if (!this.railo) {
        Downloader = require('./downloader');
        dl = new Downloader.Downloader();
        dl.set_remote_file('http://www.getrailo.org/railo/remote/download/4.0.0.013/railix/macosx/railo-4.0.0.013-railo-express-macosx.zip');
        return dl.run();
      } else {
        return cb(this.railo);
      }
    };

    Project.prototype.reset = function(err) {
      if (err != null) {
        throw err;
      }
    };

    return Project;

  })();

  exports.Project = Project;

}).call(this);
